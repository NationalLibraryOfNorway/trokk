name: Build Tauri App

on:
  push:
    tags:
      - v*
      - test*


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Disabled due to issues with linux building https://github.com/tauri-apps/tauri/issues/8929#issuecomment-1956338150
          # NO_STRIP=TRUE fix didn't work, so we are disabling linux builds for now
          #- [ self-hosted ]
          - [ self-hosted, Windows ]
        include:
          - platform: [ self-hosted ]
            linux: true
          - platform: [ self-hosted, Windows ]
            windows: true
            linux: false
    runs-on: ${{ matrix.platform }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VAULT_BASE_URL: ${{ secrets.VAULT_BASE_URL }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
      SENTRY_ENVIRONMENT: "stage" # TODO set dynamically when we have prod/stage
      SENTRY_URL: ${{ secrets.SENTRY_URL }}
      RUST_BACKTRACE: full
      RUST_LOG: debug
      ACTIONS_STEP_DEBUG: true
    steps:
      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_BASE_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            kv/team/text/data/artifactory * | ART_

      # Git fix for Windows, workaround for permission issues regarding self-hosted runners
      - name: Windows; Git fix
        if: ${{ matrix.windows }}
        run: |
          git config --global --add safe.directory C:/Users/lanman/actions-runner/_work/trokk/trokk

      - uses: actions/checkout@v4

      - name: Ubuntu; Install dependencies
        if: ${{ matrix.linux }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libssl-dev curl build-essential

      - name: Rust; Install Rust stable actions rust lang
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false
          toolchain: stable
          components: rustfmt, clippy

      # Cache target directory, ignore the bundle directory. See reasons for this globbing https://github.com/actions/toolkit/issues/713
      # Only cache the target directory, avoid "~/.cargo" since this is on a self-hosted runner, there is no need.
      - uses: actions/cache@v3
        with:
          path: |
            src-tauri/target/*/*
            !src-tauri/target/release/bundle
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Rust; Install cargo-audit
        run: cargo install cargo-audit

      - name: Rust; Run cargo audit
        continue-on-error: true
        working-directory: ./src-tauri
        run: cargo audit

      - name: Rust; Run cargo fmt
        working-directory: ./src-tauri
        run: cargo fmt --all -- --check

      - name: Rust; Run cargo clippy
        working-directory: ./src-tauri
        run: cargo clippy --all -- -D warnings
        env:
          VAULT_BASE_URL: "PLACEHOLDER"
          VAULT_ROLE_ID: "PLACEHOLDER"
          VAULT_SECRET_ID: "PLACEHOLDER"

      - name: Rust; Run cargo test
        working-directory: ./src-tauri
        run: cargo test --all

      - name: NPM; Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: NPM; Install frontend dependencies
        run: npm ci

      - name: Windows NPM; Install windows dependency
        if: ${{ matrix.windows }}
        run: npm install @tauri-apps/cli-win32-x64-msvc@2.0.0-alpha.21

      - name: NPM; Lint frontend
        run: npm run lint

      - name: NPM; Run frontend tests
        run: npm run test

      - name: Tauri build
        uses: tauri-apps/tauri-action@v0
        id: tauri_build

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3

      # Upload to Artifactory
      # Echo array of absolute paths to created artifacts.
      # e.g. '["/home/runner/work/trokk/trokk/src-tauri/target/release/bundle/deb/app.deb", "/home/runner/work/trokk/trokk/src-tauri/target/release/bundle/appimage/app.appimage"]'
      # sed directly after echo is to handle windows paths with backwards slashes
      # e.g. C:\Users\user\actions-runner\_work\trokk\trokk\src-tauri\target\release\bundle\nsis\app.nsis
      # jq is used to parse the array
      # sed is used to remove the absolute path and only keep the relative path to the artifact
      - name: Upload to Artifactory
        shell: bash
        working-directory: ./src-tauri/target/release/bundle
        run: |
          echo '${{ steps.tauri_build.outputs.artifactPaths }}' |
          sed -e 's#\\#/#g' -e 's#//#/#g' |
          jq -r .[] |
          sed -n -e 's/^.*bundle\///p' |
          xargs -I % jf rt u --url ${{ steps.import-secrets.outputs.ART_ARTIFACTORY_URL }} --user ${{ steps.import-secrets.outputs.ART_ARTIFACTORY_USER }} --password ${{ steps.import-secrets.outputs.ART_ARTIFACTORY_PASSWORD }} % "generic/trokk/${{ github.ref_name }}/"
